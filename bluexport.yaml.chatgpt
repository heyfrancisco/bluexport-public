---
- name: Capture and Export POWERVS IBM i VSI
  hosts: localhost
  gather_facts: no
  vars_files:
    - vars.yaml

  tasks:
    - name: Check if VSI name exists
      set_fact:
        vsi_exists: "{{ vsi_name in powervs_workplaces | map(attribute='vsis') | flatten }}"
      tags: always

    - name: Fail if VSI does not exist
      fail:
        msg: "VSI name '{{ vsi_name }}' does not exist in any POWERVS Workplace."
      when: not vsi_exists
      tags: always

    - name: Determine IP for VSI
      set_fact:
        vsi_ip: "{{ (powervs_workplaces | selectattr('vsis', 'contains', vsi_name) | map(attribute='ips') | list | first) | first }}"
      when: vsi_exists
      tags: always

#    - name: Change ASP device activity
#      ansible.builtin.shell:
#        cmd: "ssh -i /path/to/rsa_key user@{{ vsi_ip }} 'CHGASPACT ASPDEV(*ALL) ACT(*YES)'"
#      when: vsi_exists
#      tags: capture

    - name: Capture VSI (Placeholder for Actual Command)
      ansible.builtin.shell:
        cmd: "ibmcloud pi instance capture {{ vsi_name }} --exclude-volumes '{{ exclude_volumes | default('') }}'"
      register: capture_result
      when: vsi_exists
      tags: capture

    - block:
        - name: Export to Image Catalog (Placeholder for Actual Command)
          ansible.builtin.shell:
            cmd: "ibmcloud pi image export {{ vsi_name }} --destination image-catalog"
          when: "'image-catalog' in export_destination"
          tags: export

        - name: Export to Cloud Object Storage (Placeholder for Actual Command)
          ansible.builtin.shell:
            cmd: "ibmcloud pi image export {{ vsi_name }} --destination cloud-object"
          when: "'cloud-object' in export_destination"
          tags: export
      when: vsi_exists and capture_result is success
      tags: export

    - name: Monitor job status (Placeholder for Actual Monitoring)
      ansible.builtin.shell:
        cmd: "echo 'Monitoring job... (this should be replaced with an actual monitoring command)'"
      register: job_status
      until: job_status.stdout == "Job completed"
      retries: 12
      delay: 300 # Check every 5 minutes
      when: vsi_exists
      tags: monitor

    - name: Log debug information
      ansible.builtin.copy:
        content: "{{ capture_result.stdout }}"
        dest: "/path/to/debug_log_{{ vsi_name }}.log"
      delegate_to: localhost
      when: vsi_exists
      tags: log
